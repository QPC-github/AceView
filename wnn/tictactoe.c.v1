
#include <wnn/nn.h>
/*
 * Define the rules and the display
 * construct a NN for predicting the score
 * train the net
 */

/*
 * who : -1/1 
 * x : -1 0 1
 */

typedef struct positionStruct {
  MX mx ; int who ; 
} PP ;

typedef struct tttStruct { 
  AC_HANDLE h ;
  MX wins ;
  int winScore, maxWins, maxPos ;
  int size, maxThreads ;
  float scores[64] ;
  PP pp[64] ;
  NN *NN ;
} TTT ;

/**********************************************************************/
/* show a single position */
static void tttShowPos (PP *pp)
{
  int i, j ;
  const int *zip ;
  char *cc = "X.O";

  mxValues (pp->mx, &zip, 0, 0) ;

  for (i = 0 ; i < 3 ; i++)
    {
      for (j = 0 ; j < 3 ; j++)
	printf("%c", pp->who ? cc[zip[3*i+j]+1] : '.') ;
      printf ("\n") ;
    }
  printf ("\n") ;
} /* tttShowPos */

/**********************************************************************/
/* show a game, i.e. a set of position till the end of the game */
static void tttShowGame (TTT *ttt)
{
  int i ;
  for (i = 0 ; i < ttt->maxPos && ttt->pp[i].who ; i++)
    tttShowPos (ttt->pp + i) ;
} /* tttShowGame */

/**********************************************************************/
/* construct a netwrork to predict the score */
static NN *tttCreateNN (TTT *ttt)
{
  AC_HANDLE h = ac_new_handle () ;
  NN *nn ;
  int dimIn = ttt->maxPos ;
  int dimOut = 1 ;
  int size = ttt->size ;
  float x[dimIn * size] ;
  float y[dimOut * size] ;
  /*   int layerDims[] = { dimIn, 200, 40, 20, dimOut, 0 } ; */
  int layerDims[] = { dimIn, 3, dimOut, 0 } ;
  int layerActivations[] = { 0, ELU, TANH, 0 } ;
  /* int layerActivations[] = { 0, SIGMOID, SIGMOID, SIGMOID, SOFTMAX, 0 } ; */ 
  
  nn = nnInitialize (ttt->maxThreads, dimIn, dimOut, size, layerDims, layerActivations, FALSE) ;
  nn->learningRate = .01 ;
  nn->bMax = 1 ;

  memset (x, 0, sizeof(x)) ;
  memset (y, 0, sizeof(y)) ;
  nnSetX (nn, x, FALSE) ;
  nnSetY (nn, y, FALSE) ;
  nnSetX (nn, x, TRUE) ;
  nnSetY (nn, y, TRUE) ;
  
  ac_free (h) ;
  return nn ;
} /* tttCreateNN  */

/**********************************************************************/

static void tttInit (TTT  *ttt)
{
  int ww[] =
    { 1,1,1, 0,0,0, 0,0,0,
      0,0,0, 1,1,1, 0,0,0,
      0,0,0, 0,0,0, 1,1,1,
      1,0,0, 1,0,0, 1,0,1,
      0,1,0, 0,1,0, 0,1,0,
      0,0,1, 0,0,1, 0,0,1,
      1,0,0, 0,1,0, 0,0,1,
      0,0,1, 0,1,0, 1,0,0
    } ;

  ttt->winScore = 3 ;
  ttt->maxWins = 8 ;
  ttt->maxPos = 9 ;
  ttt->wins = mxCreate (ttt->h,  "winPos", MX_INT, ttt->maxPos, ttt->maxWins, 0) ;
  ttt->size = 2 ;
  ttt->maxThreads = 1 ;
  ttt->NN =tttCreateNN (ttt) ;

  mxSet (ttt->wins, ww) ;
  ttt->pp[0].mx = mxCreate (ttt->h,  "pos", MX_INT, ttt->maxPos, 0) ;
  ttt->pp[0].who = 1 ;

  mxShow (ttt->wins) ;
  return ;
} /* tttInit */

/**********************************************************************/

static BOOL tttIsWinningPosition (TTT *ttt, PP *pp)
{
  MX g = 0 ;
  int i ;
  const int *zip ;
  int winScore = ttt->winScore * pp->who ;

  g = mxContractFirstIndex (0, ttt->wins, pp->mx, ttt->h) ;
  mxValues (g, &zip, 0, 0) ;
  for (i = 0 ; i < ttt->maxWins ; i++)
    if (zip[i] == winScore)
      return TRUE ;  
  return FALSE ;
} /* tttIsWinningPosition  */

/**********************************************************************/
/* tttScore: predict the score associated to this position
 * using the NN (or random) or as 100 for a winning position
 */
static float tttScore (TTT *ttt, PP *pp, BOOL *donep)
{
  if (tttIsWinningPosition (ttt, pp))
    {
      *donep = TRUE ;
      return pp->who ; 
    }
  else 
    {
      int i ;
      float y, xp[ttt->maxPos * ttt->size] ;
      const float *yp ;
      const int *zip ;

      memset (xp, 0, sizeof(xp)) ;
      mxValues (pp->mx, &zip, 0, 0) ;
      for (i = 0 ; i < ttt->maxPos ; i++)
	xp[i] = zip[i] ;
      nnSetX (ttt->NN, xp, TRUE) ;
      ttt->NN->test = TRUE ;
      nnNetworkForward (ttt->NN) ;
      y = nnOutValues (ttt->NN, 0, &yp, 0) ;
      if (0) printf ("y=%f\n", y) ;
      return y ;
    }
} /* tttScore */

/**********************************************************************/
/* tttMove : perform a move, return FALSEis move is not allowed
 */
static BOOL tttMove (TTT *ttt, PP *pp, PP *newPp, int ii)
{
  const int *zip ;
  int zz[ttt->maxPos] ;

  mxValues (pp->mx, &zip, 0, 0) ;
  if (zip[ii]) /* the position is already occupied */
    return FALSE ;
  /* perform the move */
  memcpy (zz, zip, sizeof(zz)) ;
  zz[ii] = newPp->who ;
  mxSet (newPp->mx, zz) ;
  return TRUE ;
} /* tttMove */

/**********************************************************************/
/* tttPlay : plays from current position to end of game
 */
static BOOL tttPlay (TTT *ttt, int ii0)
{
  int ii1 = ii0 + 1, i, iMax = ttt->maxPos ;
  int who, bestPlay = -1 ;
  float s, bestScore = -10 ;
  PP *pp = ttt->pp + ii0 ;
  PP *newPp = ttt->pp + ii1 ;
  BOOL done = FALSE ;

  who = newPp->who = - pp->who ;
  if (! newPp->mx)
    newPp->mx = mxCreate (ttt->h,  "pos", MX_INT, ttt->maxPos, 0) ; ;
  
  memset (ttt->scores, 0, sizeof(ttt->scores)) ;
  for (i = 0 ; ! done && i < iMax ; i++)
    if (tttMove (ttt, pp, newPp, i))
      {
	s = who * tttScore (ttt, newPp, &done) ;
	if (s > bestScore)
	  {
	    bestScore = s ;
	    bestPlay = i ;
	  }
      }
  if (bestPlay < 0)
    {
      ttt->scores [ii0 - 1] = 0 ;
      newPp->who = 0 ;
    }
  else
    {
      tttMove (ttt, pp, newPp, bestPlay) ;
      ttt->scores [ii0] = bestScore ;
      if (! done)
	tttPlay (ttt, ii1) ;
    }
  return TRUE ;
} /* tttPlay */

/**********************************************************************/

int main (int argc, const char *argv[])
{
  AC_HANDLE h = ac_new_handle () ;
  int i, test = 2, nIter = 2 ;
  TTT ttt ;
  freeinit () ; 
  messErrorInit (argv[0]) ;
  
  getCmdLineInt (&argc, argv, "-t", &(test)) ;
  getCmdLineInt (&argc, argv, "-n", &(nIter)) ;

  aceInWaitAndRetry  (0) ; /* triggers the linker */

  memset (&ttt, 0, sizeof (ttt)) ;
  ttt.h = h ;
  tttInit (&ttt) ;
  for (i = 0 ; i < nIter ; i++)
    {
      tttPlay (&ttt, 0) ;
      /* tttTrain (ttt) ; */
    }
  tttShowGame (&ttt) ;  

  ac_free (h) ;
  return 0 ; 
} /* main */

/**********************************************************************/
/**********************************************************************/


