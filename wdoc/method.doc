From fw@sanger.ac.uk Wed Sep 22 19:01:29 1999
Return-Path: <fw@sanger.ac.uk>
Received: from eta.crbm.cnrs-mop.fr (IDENT:root@eta [193.49.189.67])
          by alpha.crbm.cnrs-mop.fr (8.9.3/jtpda-5.3.1) with ESMTP id TAA02187
          for <mieg@alpha.crbm.cnrs-mop.fr>; Wed, 22 Sep 1999 19:01:28 +0200 (MET DST)
Received: from jess.sanger.ac.uk (jess.sanger.ac.uk [193.60.84.61])
          by eta.crbm.cnrs-mop.fr (8.9.1a/jtpda-5.3.1) with ESMTP id TAA12112
          for <mieg@alpha.crbm.cnrs-mop.fr>; Wed, 22 Sep 1999 19:01:27 +0200
Received: from adnah.sanger.ac.uk (fw@adnah [193.60.84.22])
	by jess.sanger.ac.uk (8.8.8/8.8.7) with ESMTP id SAA25549;
	Wed, 22 Sep 1999 18:01:26 +0100 (BST)
Received: from localhost (fw@localhost)
	by adnah.sanger.ac.uk (8.8.7/8.8.7) with ESMTP id SAA02143;
	Wed, 22 Sep 1999 18:01:26 +0100 (BST)
X-Authentication-Warning: adnah.sanger.ac.uk: fw owned process doing -bs
Date: Wed, 22 Sep 1999 18:01:26 +0100 (BST)
From: Fred Wobus <fw@sanger.ac.uk>
X-Sender: fw@adnah
To: Richard Durbin <rd@sanger.ac.uk>
cc: Ed Griffiths <edgrif@sanger.ac.uk>, Simon Kelley <srk@sanger.ac.uk>,
        Jean Thierry-Mieg <mieg@alpha.crbm.cnrs-mop.fr>
Subject: new method API
Message-ID: <Pine.OSF.4.10.9909221759210.8661-100000@adnah>
MIME-Version: 1.0
Content-Type: TEXT/PLAIN; charset=US-ASCII
Status: R


I have implemented the functions that I previously suggested
with only minor changes. These are the headers of all functions
with the comments about what they do. This is copied straight out of my
method.c, so the comments are all real and within the code.

/******************************************************************
 ************************* public functions ***********************
 ******************************************************************/

METHOD *methodCreateFromObj (KEY methodKey, STORE_HANDLE handle)
     /* Loads the method of a given KEY into the struct,
      *  if the obj is in the database.
      *  all the fields are set according to the tags/values
      *  It is made sure that meth->key will be set.
      * RETURNS:
      *  the new struct (alloc'd on handle)
      *    OR
      *  NULL if the object doesn't exist in the DB.
      */


METHOD *methodCreateFromDef (char *methodName, char *aceText, 
			     STORE_HANDLE handle)
     /* Tries to find the Method of the given name in
      *  the database. If it doesn't exist, the piece of ace-file 
      *  is prepended with the method-name and parsed into the 
      *  database, which will create the object.
      *  In either case we can then create the METHOD from the object
      *  on the given handle (see methodCreateFromObj)
      * RETURNS:
      *  the METHOD struct as created from the object, whether
      *   the object had to be created or was already in the database.
      *   That struct pointer is NEVER NULL!
      * NOTE:
      *  in the worst case where the object didn't exist and aceText
      *  is an empty string, the struct will be totally uninitialised.
      */


void methodDestroy (METHOD *meth)


BOOL methodSaveToObj (METHOD *meth)
     /* Writes all the data contained in (meth) to an object
      *  meth->key which is in class Method.
      *  All data in an existing object will be overwritten.
      * RETURNS:
      *	   TRUE if we could save the data.
      *    FALSE if we couldn't open the object for update.
      */


MethodCache methodCacheCreate (STORE_HANDLE handle)
     /* Create a new method-cache upon the given handle
      *  There should be one cache per context, e.g.
      *  a cache per FMAP instance, so within this context
      *  we don't duplicate METHOD struct for the same objects 
      * RETURNS:
      *   a new cache-struct pointer (alloc'd upon handle) */


void methodCacheDestroy (MethodCache mcache)


METHOD *methodCacheGet (MethodCache mcache, KEY methodKey,
			STORE_HANDLE handle)
     /* Find the method for the given key in the cache
      * or create a new struct from it's object
      * in the database and insert it into the cache.
      * The new METHOD struct will be allocated upon the given handle.
      * RETURNS:
      *   the method struct
      *     OR
      *   NULL if Method of the given is neither in Cache
      *        nor in database
      */


METHOD *methodCacheGetByName (MethodCache mcache, char *methodName,
			      char *aceText, STORE_HANDLE handle)
     /* Find a METHOD struct in the cache by its name
      *  if it isn't found, a new one struct will be created
      *  by using the aceText to initilise the object,
      *  and it will be inserted into the cache then.
      *  NOTE: safer way to access the cache - never returns NULL!
      * RETURNS:
      *  struct pointer of METHOD either from the cache
      *  or newly allocated upon handle 
      *  That struct pointer is NEVER NULL!
      */


/******************************************************************
 ************************ private functions ***********************
 ******************************************************************/


static void methodInitialise (void)
     /* This is an internal routine, code using the method package does 
      * not need to worry about initialisation, all interface routines 
      * call this routine to make sure the package is initialised. 
      * However, some routine don't need to call this because
      * the entry conditions (messcrash assertions) couldn't
      * be TRUE without having called a function that calls
      * the initialisation anyway.
      */


static BOOL methodExists (METHOD *meth)
     /* Determine whether the METHOD* pointer is valid
      *  NOTE: every method is somehow represented
      *  by a database object and therefore 
      *  has a KEY in class Method *
      * RETURNS
      *   TRUE if a valid non-NULL pointer
      *   otherwise FALSE
      */


static void methodFinalise (void *block)
     /* clear up memory allocated for fields inside the method-struct */


static BOOL methodCacheExists (MethodCache mcache)
     /* determine whether the MethodCache pointer is valid
      * RETURNS
      *   TRUE if a valid non-NULL pointer
      *   otherwise FALSE
      */


static void methodCacheFinalise (void *block)
     /* clear up memory allocated for the method-cache
      * we kill all the method-structs in the cache
      * and then kill the cache-array */


static void methodCacheInsert (MethodCache mcache, METHOD *meth)
     /* Add the given struct into the given method-cache.
      * The structs are kept in an array indexed by the
      * number of the object in the class Method,
      * i.e. KEYKEY(meth->key)
      * cached objects are marked and not cached again.
      */




------------------------------------------------------------------------
Fred Wobus                            Phone: +44-(0)7971-085893
                                      Web:   http://www.sanger.ac.uk/~fw



