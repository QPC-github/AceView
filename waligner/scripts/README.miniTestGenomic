#!/bin/tcsh -f
#  2014_01_05

echo "This code is obsolete, please try README.miniTest"
goto done

################################################################
# Construct a mini project
##### Mini genome
#  2 small chromosomes, extracted from around gene A and B, C
#  A and B should be spliced, one on each strand, C antisense to B
#  the genes are described by a gff file
################################################################
if (! -d  MagicGenomicMiniTest) mkdir MagicGenomicMiniTest

if (! -d  MagicGenomicMiniTest) then
  echo "Sorry, i cannot find the directory ./MagicGenomicMiniTest, maybe you are not in the correct directory"
  exit 1
endif

pushd MagicGenomicMiniTest

## Task 1: construct tmp/METADATA -> .sponge, .info 
## this phase only needs to be run once

if (! -e ~/37_5/TARGET/CHROMS/hs.chrom_14.fasta.gz &&  ! -e DATA/TARGET/MagicMiniTest.data_preparation.done) then
  echo "Sorry, i cannot find the file DATA/TARGET/MagicMiniTest.data_preparation.done, so the test data are not  ready"
  echo " and I cannot find the  ~/37_5/TARGET/CHROMS/hs.chrom_14.fasta.gz, so i cannot prepeare the test data, I quit"
  exit (1)
endif


if (-e ~/37_5/TARGET/CHROMS/hs.chrom_14.fasta.gz &&  ! -e DATA/TARGET/MagicMiniTest.data_preparation.done) then

  if (! -d TARGET) mkdir TARGET
  if (! -d TARGET/Targets) mkdir TARGET/Targets
  if (! -d TARGET/GTF) mkdir TARGET/GTF

  echo "Creating the MiniTest genome and artificial reads"

  echo " extract the genome"
  dna2dna -I fasta -i ~/37_5/TARGET/CHROMS/hs.chrom_14.fasta.gz -leftClipAt 95510001 -rightClipAt  95810000 -O fasta -gzo -maxLineLn 60 >  hs.genome.dicer1_region.fasta.gz
  # get the corresponding transcripts from AceView and RefSeq and shift their coordinates
  zcat ~/37_6/TARGET/GTF/hs.av.gtf.gz | gawk -F '\t' '/^14/{a1=$4;a2=$5;if(a1>=95510001 && a2<=95810000){$4-=95510000;$5-=95510000;printf("%s",$1);for(i=2;i<=NF;i++)printf("\t%s",$i);printf("\n");}}' | gzip > hs.av_v4.dicer1_region.gtf.gz
  zcat ~/37_6/TARGET/GTF/hs.RefSeq.gtf.gz | gawk -F '\t' '/^14/{a1=$4;a2=$5;if(a1>=95510001 && a2<=95810000){$4-=95510000;$5-=95510000;printf("%s",$1);for(i=2;i<=NF;i++)printf("\t%s",$i);printf("\n");}}' | gzip > hs.RefSeq_v105.dicer1_region.gtf.gz
  echo "export the  the fasta sequence of the transcripts"
  dna2dna -gtf hs.av_v4.dicer1_region.gtf.gz -gtfGenome hs.genome.dicer1_region.fasta.gz -o hs.av_v4.dicer1_region -O fasta  -maxLineLn 60 -gzo
  dna2dna -gtf hs.RefSeq_v105.dicer1_region.gtf.gz -gtfGenome hs.genome.dicer1_region.fasta.gz -o hs.RefSeq_v105.dicer1_region -O fasta  -maxLineLn 60 -gzo

  mv  hs.*.dicer1_region.gtf.gz TARGET/GTF
  mv  hs.*.dicer1_region.fasta.gz TARGET/Targets
  
  pushd TARGET/GTF
    ln -s hs.RefSeq_v105.dicer1_region.gtf.gz hs.RefSeq.gtf.gz
    ln -s hs.av_v4.dicer1_region.gtf.gz hs.av.gtf.gz
  popd
  pushd TARGET/Targets
    ln -s hs.av_v4.dicer1_region.fasta.gz hs.av.fasta.gz
    ln -s hs.RefSeq_v105.dicer1_region.fasta.gz hs.RefSeq.fasta.gz
    ln -s hs.genome.dicer1_region.fasta.gz hs.genome.fasta.gz
    ln -s hs.genome.dicer1_region.fasta.gz hs.gdecoy.fasta.gz
    cp ~/37_6/TARGET/Targets/hs.DNASpikeIn.fasta.gz .
    cp ~/37_6/TARGET/Targets/hs.SpikeIn.fasta.gz .
    cp ~/37_6/TARGET/Targets/hs.mito.fasta.gz .
    cp ~/37_6/TARGET/Targets/hs.rrna.fasta.gz .
  popd
  mkdir  TARGET/CHROMS
  cp TARGET/Targets/hs.genome.fasta.gz TARGET/CHROMS/hs.chrom_14.fasta.gz
  ls -ls TARGET/CHROMS TARGET/GTF TARGET/Targets

cat << EOF > TARGET/LIMITS
#!/bin/tcsh -f

setenv MAGIC_SUBMIT MULTICORE

# Parameters adapted for human
setenv species hs
setenv Reference_genome GRCh37.Dicer1_region
setenv intronMaxLength 100000
setenv chromSetAll "14"

setenv DNAtargets "DNASpikeIn SpikeIn mito genome gdecoy"
setenv RNAtargets "rrna"

setenv Etargets ""

EOF

  touch TARGET/MagicMiniTest.data_preparation.done
endif

if (! -e DATA/Fastc/GenomeMagicMiniTest.fastc_preparation.done) then
    if (! -d Fastc) mkdir Fastc

set NN=40000

     echo "Create the artificial runs"
    echo "dna2dna -createTestSet $NN -ctsL 50 -ctsStep 1 -o toto -i TARGET/Targets/hs.genome.fasta.gz "
          dna2dna -createTestSet $NN -ctsL 50 -ctsStep 1 -o toto -i TARGET/Targets/hs.genome.fasta.gz 
    mkdir Fastc/GenomeSingleExact50.NoPolyA
    cat toto.*.exact.forward.fasta    | gzip >  Fastc/GenomeSingleExact50.NoPolyA/f2.1.fastc.gz
    mkdir Fastc/GenomeSingleSub50.NoPolyA
    cat toto.*.exact.forward.fasta    | gzip >  Fastc/GenomeSingleSub50.NoPolyA/f2.1.fastc.gz
    cat toto.*.variant.forward.fasta    | gzip >  Fastc/GenomeSingleSub50.NoPolyA/f2.2.fastc.gz
    \rm toto.*.fasta

    echo "dna2dna -createTestSet $NN -ctsL 50 -ctsStep 1 -ctsInDel -o toto -i TARGET/Targets/hs.genome.fasta.gz "
          dna2dna -createTestSet $NN -ctsL 50 -ctsStep 1 -ctsInDel -o toto -i TARGET/Targets/hs.genome.fasta.gz 
    mkdir Fastc/GenomeSingleIndel50.NoPolyA
    cat toto.*.exact.forward.fasta    | gzip >  Fastc/GenomeSingleIndel50.NoPolyA/f2.1.fastc.gz
    cat toto.*.variant.forward.fasta    | gzip >  Fastc/GenomeSingleIndel50.NoPolyA/f2.2.fastc.gz
    \rm toto.*.fasta



    echo "dna2dna -createTestSet $NN -ctsL 100 -ctsP 180 -ctsStep 1 -o toto -i TARGET/Targets/hs.genome.fasta.gz "
          dna2dna -createTestSet $NN -ctsL 100 -ctsP 180 -ctsStep 1 -o toto -i TARGET/Targets/hs.genome.fasta.gz 
    mkdir Fastc/GenomePairExact100_180.NoPolyA
    cat toto.*.exact.reverse.fasta    | gzip >  Fastc/GenomePairExact100_180.NoPolyA/f2.1.fastc.gz
    mkdir Fastc/GenomePairSub100_180.NoPolyA
    cat toto.*.exact.reverse.fasta    | gzip >  Fastc/GenomePairSub100_180.NoPolyA/f2.1.fastc.gz
    cat toto.*.variant.reverse.fasta    | gzip >  Fastc/GenomePairSub100_180.NoPolyA/f2.2.fastc.gz
    \rm toto.*.fasta


    echo "dna2dna -createTestSet $NN -ctsL 100 -ctsP 180 -ctsStep 1 -ctsInDel -o toto -i TARGET/Targets/hs.genome.fasta.gz "
          dna2dna -createTestSet $NN -ctsL 100 -ctsP 180 -ctsStep 1 -ctsInDel -o toto -i TARGET/Targets/hs.genome.fasta.gz 
    mkdir Fastc/GenomePairIndel100_180.NoPolyA
    cat toto.*.exact.reverse.fasta    | gzip >  Fastc/GenomePairIndel100_180.NoPolyA/f2.1.fastc.gz
    cat toto.*.variant.reverse.fasta    | gzip >  Fastc/GenomePairIndel100_180.NoPolyA/f2.2.fastc.gz
    \rm toto.*.fasta

    zcat  TARGET/Targets/hs.genome.fasta.gz > toto.1.fasta
    echo ">Inv" > toto.2.fasta
    dna2dna -i  toto.1.fasta -I fasta -leftClipAt 1 -rightClipAt 10000 -O raw >> toto.2.fasta
    dna2dna -i  toto.1.fasta -I fasta -leftClipAt 10001 -rightClipAt 20000 -O raw | dna2dna -I raw -O raw -complement  >> toto.2.fasta
    dna2dna -i  toto.1.fasta -I fasta -leftClipAt 20001 -rightClipAt 300000 -O raw >> toto.2.fasta

    echo "dna2dna -createTestSet $NN -ctsL 100 -ctsP 180 -ctsStep 1 -o toto -i  toto.2.fasta"
          dna2dna -createTestSet $NN -ctsL 100 -ctsP 180 -ctsStep 1 -o toto -i  toto.2.fasta
    mkdir Fastc/GenomePairInversion
    cat toto.*.exact.reverse.fasta    | gzip >  Fastc/GenomePairInversion/f2.1.fastc.gz
    \rm toto.*.fasta

# create runs.ace
   cat << EOF > runs.ace

Run GenomeSingleExact50.NoPolyA
Sorting_title 100
Genome
SNP
Is_run
Forward
Group GenomeExactFR
project GenomeTest
W_colour_plus RED
W_colour_minus LIGHTRED

Run GenomeSingleSub50.NoPolyA
Sorting_title 110
Genome
SNP
Is_run
Forward
Group GenomeSubFR
project GenomeTest
W_colour_plus RED7
W_colour_minus RED3

Run GenomeSingleIndel50.NoPolyA
Sorting_title 120
Genome
SNP
Is_run
Forward
Group GenomeIndelFR
project GenomeTest
W_colour_plus RED7
W_colour_minus RED3

Run GenomePairExact100_180.NoPolyA
Sorting_title 200
Genome
SNP
Is_run
Reverse
Paired_end
Group GenomeExactFR
project GenomeTest
W_colour_plus GREEN
W_colour_minus LIGHTGREEN

Run GenomePairSub100_180.NoPolyA
Sorting_title 210
Genome
SNP
Is_run
Reverse
Paired_end
Group GenomeSubFR
project GenomeTest
W_colour_plus GREEN7
W_colour_minus GREEN3

Run GenomePairIndel100_180.NoPolyA
Sorting_title 220
Genome
SNP
Is_run
Reverse
Paired_end
Group GenomeIndelFR
project GenomeTest
W_colour_plus GREEN7
W_colour_minus GREEN3


Run GenomeExactFR
Sorting_title 1100
Genome
SNP
project GenomeTest
Sample Dicer_region_exact
SNP
Wiggle
W_colour_plus BLUE
W_colour_minus LIGHTBLUE
Variance
de_duo
Title "mix of F and R dicer region artificial reads"

Run GenomeSubFR
Sorting_title 1200
Genome
SNP
project GenomeTest
Sample Dicer_region_with_indel
SNP
Wiggle
W_New_Exon
W_colour_plus ORANGE
W_colour_minus YELLOW
Variance
de_duo
Title "mix of F and R dicer region with substitutions"

Run GenomeIndelFR
Sorting_title 1300
Genome
SNP
project GenomeTest
Sample Dicer_region_with_indel
SNP
Wiggle
W_colour_plus CYAN
W_colour_minus PALECYAN
Variance
de_duo
Title "mix of F and R dicer region with In/Del"

Run GenomePairInversion
Is_run
Sorting_title 2000
Genome
SNP
project GenomeTest
Sample Dicer_region_with_inversion_100k_200k
SNP
Wiggle
W_colour_plus CYAN
W_colour_minus PALECYAN
Variance
de_duo
Title "Genome Inversion 100k-200k"

EOF


    touch Fastc/GenomeMagicMiniTest.fastc_preparation.done
    mkdir DATA
    mv runs.ace Fastc TARGET DATA
    echo MagicMiniTest.fastc_preparation.done
    popd 
    ls -ls MagicMiniTestGenomic/DATA/Fastc/*/*.gz
    exit 0
endif

##### Mini runs
#  3 runs : ILM paired stranded, ILM nonstranded, Solid stranded
#  each run contains 10 reads of read pairs
#  with all possible geomeries, including a gene fusion and SNPs
#  and should include a run comparioson and a group
## Task 2: construct the Fastc files
## Task 3: Align, Quality control, wiggle, SNPs, Expression, introns


##########################################################################
## verify that the ENV is correct

if (! $?MAGIC_SRC) then
  echo "Please setenv MAGIC_SRC to point to the Magic source code (so that the file "'$'"MAGIC_SRC/waligner/scripts/MAGIC exists"
  exit 1
endif
if (! -e $MAGIC_SRC/waligner/scripts/MAGIC) then
  echo "Sorry, the file $MAGIC_SRC/waligner/scripts/MAGIC does not exist"
  exit 1
endif
if (! -x $MAGIC_SRC/waligner/scripts/MAGIC) then
  echo "Sorry, the file $MAGIC_SRC/waligner/scripts/MAGIC exists but is not executable, please report this error to mieg@ncbi.nlm.nih.gov"
  exit 1
endif

if (! $?ACEDB_MACHINE) then
   echo "please setenv ACEDB_MACHINE so that  $MAGIC_SRC/bin."'$'"ACEDB_MACHINE/tacembly exist"
  exit 1
endif

##########################################################################
## create the configuration

pwd

setenv MAGIC GenomeTest
if (! -d MetaDB) then
  ln -s DATA/Fastc
  ln -s DATA/TARGET
  $MAGIC_SRC/waligner/scripts/MAGIC init DNA
echo "parsing DATA/runs.ace"
  bin/tacembly MetaDB << EOF
    pparse DATA/runs.ace
    show
    save
    quit
EOF

endif

##########################################################################
## run the code

setenv MAGIC_SUBMIT MULTICORE
if (1) then
  MAGIC ALIGN SNP
else
  MAGIC ALIGN WIGGLE SNP
  MAGIC wait f1 wait f2 wait f3 wait f4 wait

  bly tmp/XH14/ &
endif


#### Verif: verify all output files automatically using Aquila or a derivative
#### 1) verify by hand that all output files are useful and correct
#### 2) register a reference copy of these files and diff to check the current code


done:
 echo done
